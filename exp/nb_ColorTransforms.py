
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/ColorTransforms.ipynb

from .nb_Tesis import *

def correct_iluminant(estimated_iluminant):
    perfect_white_light = (torch.ones(3) / math.sqrt(3))
    corrected_iluminant = perfect_white_light * (1 / estimated_iluminant)
    return corrected_iluminant

def correct_image(image,estimated_iluminant):
    corrected_iluminant = correct_iluminant(estimated_iluminant)
    mat_iluminant = corrected_iluminant[:,None,None].expand(image.shape)
    c = mat_iluminant * image
    return c

def gamma_correction_step(image,gamma):
    return image ** gamma

def max_rgb(image):
  # First get the maximum across the rows, then take the values and take the maximum again (this time dimension 1 will be the columns)
    e = image.max(dim=1)[0].max(dim=1)[0]
    k = 1 / torch.norm(e)
    return e * k


def _correct_color_max_rgb(gamma=1):
    def closure(image):
        image = gamma_correction_step(image,gamma=gamma)
        estimated_iluminant = max_rgb(image);
        c = correct_image(image,estimated_iluminant)
        return c
    return closure


def correct_color_max_rgb(gamma,order=0):
    return TfmPixel(_correct_color_max_rgb(gamma),order=order)()

def shades_of_gray(image, p, gamma):
    image = gamma_correction_step(image,gamma=gamma)
    e = ((image ** p).sum(dim=[1,2]) / image.sum()) ** (1/p)
    k = 1 / torch.norm(e)
    return e * k


def _correct_color_shades_of_gray(p=6, gamma=1):
    def closure(image):
        estimated_iluminant = shades_of_gray(image,p,gamma);
        c = correct_image(image,estimated_iluminant)
        return torch.clamp(c,0,1)
    return closure


def _correct_color_gray_world(gamma):
    def closure(image):
        return _correct_color_shades_of_gray(p=1,gamma=gamma)(image)
    return closure


def correct_color_shades_of_gray(p,gamma,order=0):
    return TfmPixel(_correct_color_shades_of_gray(p,gamma),order=order)()

def correct_color_gray_world(gamma,order=0):
    return TfmPixel(_correct_color_gray_world(gamma),order=order)()